var documenterSearchIndex = {"docs":
[{"location":"heom_matrix/#HEOM-Matrix","page":"HEOM Matrix","title":"Hierarchical Equations of Motion (Heom) Liouvillian Superoperator Matrix","text":"","category":"section"},{"location":"fermionic_bath/#Fermionic-Bath","page":"Fermionic Bath","title":"Fermionic Bath","text":"","category":"section"},{"location":"fermionic_bath/#Lorentz-Spectral-Density","page":"Fermionic Bath","title":"Lorentz Spectral Density","text":"","category":"section"},{"location":"fermionic_bath/#Matsubara-Expansion","page":"Fermionic Bath","title":"Matsubara Expansion","text":"","category":"section"},{"location":"fermionic_bath/#Padé-Expansion","page":"Fermionic Bath","title":"Padé Expansion","text":"","category":"section"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#Heom.jl","page":"Installation","title":"Heom.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"To install Heom.jl, run the following commands inside Julia's interactive session (also known as REPL):","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"Heom\")","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Alternatively, this can also be done in Julia's Pkg REPL by pressing the key ] in the REPL to use the package mode, and then type the following command:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(1.8) pkg> add Heom","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"More information about Julia's package manager can be found at Pkg.jl.  ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Julia 1.8\nHeom.jl requires Julia 1.8 or higher","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"To load the package and check the version information, use the command:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> using Heom\njulia> Heom.versioninfo()","category":"page"},{"location":"install/#Other-Useful-Packages","page":"Installation","title":"Other Useful Packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In order to get a better experience and take full advantage of Heom, we recommend to install the following external packages:","category":"page"},{"location":"install/#[QuantumOptics.jl](https://qojulia.org/)","page":"Installation","title":"QuantumOptics.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"QuantumOptics framework provides many useful functions to create arbitrary quantum states and operators which can be combined in all the expected ways. Constructing arbitrary Hamiltonians and specifying initial states is also straightforward.  ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThe inputs in Heom should be child-type of the standard Base.AbstractVector (for vector-type quantum states) and Base.AbstractMatrix (for matrix-type quantum operators). Users can still construct the vectors or matrices by standard method and take it as the input of Heom.   For the users who constructs the quantum objects by QuantumOptics package, the standard type of vectors or matrices are stored in the .data field of the objects, i.e., op.data (where op is a QuantumOptics-type object). Thus, users should take it as the inputs of Heom for objects in QuantumOptics package.","category":"page"},{"location":"install/#[DifferentialEquations.jl](https://diffeq.sciml.ai/stable/)","page":"Installation","title":"DifferentialEquations.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"DifferentialEquations is needed to provide the low-level ODE solvers especially for solving time evolution. For low dependency usage, users can use OrdinaryDiffEq.jl instead.","category":"page"},{"location":"install/#[LinearSolve.jl](http://linearsolve.sciml.ai/stable/)","page":"Installation","title":"LinearSolve.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"LinearSolve is a unified interface for the linear solving packages of Julia. It interfaces with other packages of the Julia ecosystem to make it easier to test alternative solver packages and pass small types to control algorithm swapping. It is needed to provide the solvers especially for solving SteadyState and spectrum for both bosonic and fermionic systems.","category":"page"},{"location":"install/#[JLD2.jl](https://juliaio.github.io/JLD2.jl/stable/)","page":"Installation","title":"JLD2.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"JLD2 saves and loads Julia data structures in a format comprising a subset of HDF5. Because the size of matrix in Heom is usually super large and leads to long time calculation, we support the functionality for saving and loading the Heom-type objects into files by JLD2 >= 0.4.23.","category":"page"},{"location":"install/#[Plots.jl](https://docs.juliaplots.org/stable/)","page":"Installation","title":"Plots.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Plots is a visualization interface and toolset for Julia.","category":"page"},{"location":"lib/heom_api/#Heom-API-Module","page":"Heom API","title":"Heom API Module","text":"","category":"section"},{"location":"lib/heom_api/#Heom-liouvillian-superoperator-matrices","page":"Heom API","title":"Heom liouvillian superoperator matrices","text":"","category":"section"},{"location":"lib/heom_api/#Heom-matrix-for-standard-Schrodinger-(Liouville-von-Neumann)-equation","page":"Heom API","title":"Heom matrix for standard Schrodinger (Liouville-von Neumann) equation","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_S","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_S","page":"Heom API","title":"Heom.HeomAPI.M_S","text":"struct M_S <: AbstractHEOMMatrix\n\nHEOM Liouvillian superoperator matrix with cutoff level of the hierarchy equals to 0.   This corresponds to the standard Schrodinger (Liouville-von Neumann) equation, namely\n\nMcdot=-i leftH_sys cdot right_-\n\nwhere cdot cdot_- stands for commutator.\n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier : the tier (cutoff level) for the hierarchy, which equals to 0 in this case\ndim : the dimension of system\nN : the number of total ADOs, which equals to 1 (only the reduced density operator) in this case\nsup_dim : the dimension of system superoperator\nparity : the parity label of the fermionic system (usually :even, only set as :odd for calculating spectrum of fermionic system)\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_S(Hsys, parity::Symbol=:even; verbose::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_S-2","page":"Heom API","title":"Heom.HeomAPI.M_S","text":"M_S(Hsys, parity=:even; verbose=true)\n\nGenerate HEOM Liouvillian superoperator matrix with cutoff level of the hierarchy equals to 0.   This corresponds to the standard Schrodinger (Liouville-von Neumann) equation, namely\n\nMcdot=-i leftH_sys cdot right_-\n\nwhere cdot cdot_- stands for commutator.\n\nParameters\n\nHsys : The time-independent system Hamiltonian\nparity::Symbol : the parity label of the fermionic system (only set as :odd for calculating spectrum of fermionic system). Defaults to :even.\nverbose::Bool : To display verbose output during the process or not. Defaults to true.\n\nNote that the parity only need to be set as :odd when the system contains fermionic systems and you need to calculate the spectrum (density of states) of it.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Boson-Heom-matrix","page":"Heom API","title":"Boson Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson","page":"Heom API","title":"Heom.HeomAPI.M_Boson","text":"struct M_Boson <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for bosonic bath\n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier : the tier (cutoff level) for the bosonic hierarchy\ndim : the dimension of system\nN : the number of total ADOs\nsup_dim : the dimension of system superoperator\nparity : the parity label of the fermionic system (usually :even, only set as :odd for calculating spectrum of fermionic system).\nbath::Vector{BosonBath} : the vector which stores all BosonBath objects\nhierarchy::HierarchyDict: the object which contains all dictionaries for boson-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson(Hsys::AbstractMatrix, tier::Int, Bath::Vector{BosonBath}, parity::Symbol=:even; threshold::Real=0.0, verbose::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson-2","page":"Heom API","title":"Heom.HeomAPI.M_Boson","text":"M_Boson(Hsys, tier, Bath, parity=:even; threshold=0.0, verbose=true)\n\nGenerate the boson-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The time-independent system Hamiltonian\ntier::Int : the tier (cutoff level) for the bosonic bath\nBath::Vector{BosonBath} : objects for different bosonic baths\nparity::Symbol : the parity label of the fermionic system (only set as :odd for calculating spectrum of fermionic system). Defaults to :even.\nthreshold::Real : The threshold of the importance value (see Ref. [1]). Defaults to 0.0.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\nNote that the parity only need to be set as :odd when the system contains fermionic systems and you need to calculate the spectrum (density of states) of it.\n\n[1] Phys. Rev. B 88, 235426 (2013)\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Fermion-Heom-matrix","page":"Heom API","title":"Fermion Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Fermion","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Fermion","page":"Heom API","title":"Heom.HeomAPI.M_Fermion","text":"struct M_Fermion <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for fermionic bath\n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier : the tier (cutoff level) for the fermionic hierarchy\ndim : the dimension of system\nN : the number of total ADOs\nsup_dim : the dimension of system superoperator\nparity : the parity label of the fermionic system (usually :even, only set as :odd for calculating spectrum of fermionic system)\nbath::Vector{FermionBath} : the vector which stores all FermionBath objects\nhierarchy::HierarchyDict: the object which contains all dictionaries for fermion-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Fermion(Hsys::AbstractMatrix, tier::Int, Bath::Vector{FermionBath}, parity::Symbol=:even; threshold::Real=0.0, verbose::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Fermion-2","page":"Heom API","title":"Heom.HeomAPI.M_Fermion","text":"M_Fermion(Hsys, tier, Bath, parity=:even; threshold=0.0, verbose=true)\n\nGenerate the fermion-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The time-independent system Hamiltonian\ntier::Int : the tier (cutoff level) for the fermionic bath\nBath::Vector{FermionBath} : objects for different fermionic baths\nparity::Symbol : the parity label of the fermionic system (only set as :odd for calculating spectrum of fermionic system). Defaults to :even.\nthreshold::Real : The threshold of the importance value (see Ref. [1]). Defaults to 0.0.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\n[1] Phys. Rev. B 88, 235426 (2013)\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Boson-Fermion-Heom-matrix","page":"Heom API","title":"Boson-Fermion Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson_Fermion","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson_Fermion","page":"Heom API","title":"Heom.HeomAPI.M_Boson_Fermion","text":"struct M_Boson_Fermion <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for mixtured (bosonic and fermionic) bath \n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\nBtier : the tier (cutoff level) for bosonic hierarchy\nFtier : the tier (cutoff level) for fermionic hierarchy\ndim : the dimension of system\nN : the number of total ADOs\nsup_dim : the dimension of system superoperator\nparity : the parity label of the fermionic system (usually :even, only set as :odd for calculating spectrum of fermionic system).\nBbath::Vector{BosonBath} : the vector which stores all BosonBath objects\nFbath::Vector{FermionBath} : the vector which stores all FermionBath objects\nhierarchy::MixHierarchyDict: the object which contains all dictionaries for mixed-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson_Fermion(Hsys::AbstractMatrix, tier_b::Int, tier_f::Int, Bath_b::Vector{BosonBath}, Bath_f::Vector{FermionBath}, parity::Symbol=:even; threshold::Real=0.0, verbose::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson_Fermion-2","page":"Heom API","title":"Heom.HeomAPI.M_Boson_Fermion","text":"M_Boson_Fermion(Hsys, Btier, Ftier, Bbath, Fbath, parity=:even; threshold=0.0, verbose=true)\n\nGenerate the boson-fermion-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The time-independent system Hamiltonian\nBtier::Int : the tier (cutoff level) for the bosonic bath\nFtier::Int : the tier (cutoff level) for the fermionic bath\nBbath::Vector{BosonBath} : objects for different bosonic baths\nFbath::Vector{FermionBath} : objects for different fermionic baths\nparity::Symbol : the parity label of the fermionic system (only set as :odd for calculating spectrum of fermionic system). Defaults to :even.\nthreshold::Real : The threshold of the importance value (see Ref. [1, 2]). Defaults to 0.0.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\nNote that the parity only need to be set as :odd when the system contains fermion systems and you need to calculate the spectrum of it.\n\n[1] Phys. Rev. B  88, 235426 (2013) [2] Phys. Rev. B 103, 235413 (2021)\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Functions-for-Heom-Matrices","page":"Heom API","title":"Functions for Heom Matrices","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"size(M::AbstractHEOMMatrix)\nPropagator\naddBosonicDissipator\naddFermionicDissipator\naddTerminator","category":"page"},{"location":"lib/heom_api/#Base.size-Tuple{AbstractHEOMMatrix}","page":"Heom API","title":"Base.size","text":"size(M::AbstractHEOMMatrix)\n\nReturns the size of the Heom liouvillian superoperator matrix\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Heom.HeomAPI.Propagator","page":"Heom API","title":"Heom.HeomAPI.Propagator","text":"Propagator(M, Δt; threshold, nonzero_tol)\n\nUse FastExpm.jl to calculate the propagator matrix from a given Heom liouvillian superoperator matrix M with a specific time step Δt. That is, exp(M * Delta t).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nΔt::Real : A specific time step (time interval).\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\n::SparseMatrixCSC{ComplexF64, Int64} : the propagator matrix\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.addBosonicDissipator","page":"Heom API","title":"Heom.HeomAPI.addBosonicDissipator","text":"addBosonicDissipator(M, jumpOP)\n\nAdding bosonic dissipator to a given HEOM matrix which describes how the system dissipatively interacts with an extra bosonic environment.   The dissipator is defined as follows\n\nDJ(cdot) = J(cdot) J^dagger - frac12left(J^dagger J (cdot) + (cdot) J^dagger J right)\n\nwhere Jequiv sqrtgammaV is the jump operator, V describes the dissipative part (operator) of the dynamics, and gamma represents a non-negative damping rate.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\njumpOP::AbstractVector : The list of collapse (jump) operators to add. Defaults to empty vector [].\n\nReturn\n\nM_new::AbstractHEOMMatrix : the new HEOM liouvillian superoperator matrix\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.addFermionicDissipator","page":"Heom API","title":"Heom.HeomAPI.addFermionicDissipator","text":"addFermionicDissipator(M, jumpOP)\n\nAdding fermionic dissipator to a given HEOM matrix which describes how the system dissipatively interacts with an extra fermionic environment.   The dissipator with :even parity is defined as follows\n\nD_evenJ(cdot) = J(cdot) J^dagger - frac12left(J^dagger J (cdot) + (cdot) J^dagger J right)\n\nwhere Jequiv sqrtgammaV is the jump operator, V describes the dissipative part (operator) of the dynamics, and gamma represents a non-negative damping rate.\n\nSimilary, the dissipator with :odd parity is defined as follows\n\nD_oddJ(cdot) = - J(cdot) J^dagger - frac12left(J^dagger J (cdot) + (cdot) J^dagger J right)\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\njumpOP::AbstractVector : The list of collapse (jump) operators to add. Defaults to empty vector [].\n\nNote that the parity of the dissipator will be determined by the parity of the given HEOM matrix M.\n\nReturn\n\nM_new::AbstractHEOMMatrix : the new HEOM liouvillian superoperator matrix\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.addTerminator","page":"Heom API","title":"Heom.HeomAPI.addTerminator","text":"addTerminator(M, Bath)\n\nAdding terminator to a given HEOM matrix.\n\nThe terminator is a liouvillian term representing the contribution to  the system-bath dynamics of all exponential-expansion terms beyond Bath.Nterm\n\nThe difference between the true correlation function and the sum of the  Bath.Nterm-exponential terms is approximately 2 * δ * dirac(t). Here, δ is the approximation discrepancy and dirac(t) denotes the Dirac-delta function.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nBath::Union{BosonBath, FermionBath} : The bath object which contains the approximation discrepancy δ\n\nReturn\n\nM_new::AbstractHEOMMatrix : the new HEOM liouvillian superoperator matrix\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Auxiliary-Density-Operators-(ADOs)","page":"Heom API","title":"Auxiliary Density Operators (ADOs)","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"ADOs","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.ADOs","page":"Heom API","title":"Heom.HeomAPI.ADOs","text":"mutable struct ADOs\n\nThe Auxiliary Density Operators for HEOM model.\n\nFields\n\ndata : the vectorized auxiliary density operators\ndim : the dimension of the system\nN : the number of auxiliary density operators\n\nMethods\n\nOne can obtain the density matrix for specific index (idx) by calling : ados[idx]. Heom.jl also supports the following calls (methods) :\n\nlength(ados);  # returns the total number of `ADOs`\nados[1:idx];   # returns a vector which contains the `ADO` (in matrix form) from index `1` to `idx`\nados[1:end];   # returns a vector which contains all the `ADO` (in matrix form)\nados[:];       # returns a vector which contains all the `ADO` (in matrix form)\nfrom rho in ados  # iteration\n    # do something\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"ADOs(V::AbstractVector, N::Int)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.ADOs-Tuple{AbstractVector, Int64}","page":"Heom API","title":"Heom.HeomAPI.ADOs","text":"ADOs(V, N)\n\nGernerate the object of auxiliary density operators for Heom model.\n\nParameters\n\nV::AbstractVector : the vectorized auxiliary density operators\nN::Int : the number of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Functions-for-Auxiliary-Density-Operators","page":"Heom API","title":"Functions for Auxiliary Density Operators","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"length(A::ADOs)\ngetRho\ngetADO(ados::ADOs, idx::Int)","category":"page"},{"location":"lib/heom_api/#Base.length-Tuple{ADOs}","page":"Heom API","title":"Base.length","text":"length(A::ADOs)\n\nReturns the total number of the Auxiliary Density Operators (ADOs)\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Heom.HeomAPI.getRho","page":"Heom API","title":"Heom.HeomAPI.getRho","text":"getRho(ados)\n\nReturn the density matrix of the reduced state (system) from a given auxiliary density operators\n\nParameters\n\nados::ADOs : the auxiliary density operators for Heom model\n\nReturns\n\nρ : The density matrix of the reduced state\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.getADO-Tuple{ADOs, Int64}","page":"Heom API","title":"Heom.HeomAPI.getADO","text":"getADO(ados, idx)\n\nReturn the auxiliary density operator with a specific index from auxiliary density operators\n\nThis function equals to calling : ados[idx].\n\nParameters\n\nados::ADOs : the auxiliary density operators for Heom model\nidx::Int : the index of the auxiliary density operator\n\nReturns\n\nρ_idx : The auxiliary density operator\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#lib-Hierarchy-Dictionary","page":"Heom API","title":"Hierarchy Dictionary","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"Nvec","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.Nvec","page":"Heom API","title":"Heom.HeomAPI.Nvec","text":"struct Nvec\n\nAn object which describes the repetition number of each multi-index ensembles in auxiliary density operators.\n\nThe n_vector (vecn) denotes a set of integers:\n\n n_11  n_alpha k  \n\nassociated with the k-th exponential-expansion term in the alpha-th bath. If n_alpha k = 3 means that the multi-index ensemble alpha k appears three times in the multi-index vector of ADOs (see the notations in our paper).\n\nThe hierarchy level (L) for an n_vector is given by L=sum_alpha k n_alpha k\n\nFields\n\ndata : the n_vector\nlevel : The level L for the n_vector\n\nMethods\n\nOne can obtain the repetition number for specific index (idx) by calling : n_vector[idx]. To obtain the corresponding tuple (alpha k) for a given index idx, see bathPtr in HierarchyDict for more details.\n\nHeom.jl also supports the following calls (methods) : ``julia length(n_vector);  # returns the length ofNvecn_vector[1:idx];   # returns a vector which contains the excitation number ofnvectorfrom index1toidx` nvector[1:end];   # returns a vector which contains all the excitation number of n_vector nvector[:];       # returns a vector which contains all the excitation number of `nvector` from n in n_vector  # iteration     # do something end\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"HierarchyDict\nMixHierarchyDict","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.HierarchyDict","page":"Heom API","title":"Heom.HeomAPI.HierarchyDict","text":"struct HierarchyDict <: AbstractHierarchyDict\n\nAn object which contains all dictionaries for pure (bosonic or fermionic) bath-ADOs hierarchy.\n\nFields\n\nidx2nvec : Return the Nvec from a given index\nnvec2idx : Return the index from a given Nvec\nlvl2idx : Return the list of indices from a given level\nbathPtr : Records the tuple (alpha k) for each position in Nvec, where alpha and k represents the k-th exponential-expansion term of the alpha-th bath.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Heom.HeomAPI.MixHierarchyDict","page":"Heom API","title":"Heom.HeomAPI.MixHierarchyDict","text":"struct MixHierarchyDict <: AbstractHierarchyDict\n\nAn object which contains all dictionaries for mixed (bosonic and fermionic) bath-ADOs hierarchy.\n\nFields\n\nidx2nvec : Return the tuple (Nvec_b, Nvec_f) from a given index, where b represents boson and f represents fermion\nnvec2idx : Return the index from a given tuple (Nvec_b, Nvec_f), where b represents boson and f represents fermion\nBlvl2idx : Return the list of indices from a given bosonic level (excitation)\nFlvl2idx : Return the list of indices from a given fermionic level (excitation)\nbosonPtr : Records the tuple (alpha k) for each position in Nvec_b, where alpha and k represents the k-th exponential-expansion term of the alpha-th bosonic bath.\nfermionPtr : Records the tuple (alpha k) for each position in Nvec_f, where alpha and k represents the k-th exponential-expansion term of the alpha-th fermionic bath.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"getIndexEnsemble","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.getIndexEnsemble","page":"Heom API","title":"Heom.HeomAPI.getIndexEnsemble","text":"getIndexEnsemble(nvec, bathPtr)\n\nSearch for all the multi-index ensemble (alpha k) where alpha and k represents the k-th exponential-expansion term in the alpha-th bath.\n\nParameters\n\nnvec::Nvec : An object which records the repetition number of each multi-index ensembles in ADOs.\nbathPtr::Vector{Tuple{Int, Int}}: This can be obtained from HierarchyDict.bathPtr, MixHierarchyDict.bosonPtr, or MixHierarchyDict.fermionPtr.\n\nReturns\n\nVector{Tuple{Int, Int, Int}}: a vector (list) of the tuples (alpha k n).\n\nExample\n\nHere is an example to use Bath, Exponent, HierarchyDict, and getIndexEnsemble together:\n\nL::M_Fermion;          # suppose this is a fermion type of HEOM liouvillian superoperator matrix you create\nHDict = L.hierarchy;   # the hierarchy dictionary\nados = SteadyState(L); # the stationary state (ADOs) for L \n\n# Let's consider all the ADOs for first level\nidx_list = HDict.lvl2idx[1];\n\nfor idx in idx_list\n    ρ1 = ados[idx]  # one of the 1st-level ADO\n    nvec = HDict.idx2nvec[idx]  # the nvec corresponding to ρ1\n    \n    for (α, k, n) in getEnsemble(nvec, HDict.bathPtr)\n        α  # index of the bath\n        k  # the index of the exponential-expansion term in α-th bath\n        n  # the repetition number of the ensemble \\{\\alpha, k\\} in ADOs\n        exponent = L.bath[α][k]  # the k-th exponential-expansion term in α-th bath\n\n        # do some calculations you want\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/misc/#Misc.","page":"Misc.","title":"Misc.","text":"","category":"section"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"Heom.versioninfo()","category":"page"},{"location":"lib/misc/#Heom.HeomBase.versioninfo-Tuple{}","page":"Misc.","title":"Heom.HeomBase.versioninfo","text":"Heom.versioninfo(io::IO=stdout)\n\nCommand line output of information on Heom, dependencies, and system informations.\n\n\n\n\n\n","category":"method"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"The outputs will be something like the following:","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"julia> Heom.versioninfo()\n\n                                   __\n                                  /  \\\n __     __                     __ \\__/ __\n|  |   |  |                   /  \\    /  \\\n|  |   |  | ______   ______   \\__/_  _\\__/\n|  |___|  |/  __  \\ /  __  \\ / '   \\/     \\\n|   ___   |  |__)  |  /  \\  |    _     _   |\n|  |   |  |   ____/| (    ) |   / \\   / \\  |\n|  |   |  |  |____ |  \\__/  |  |   | |   | |\n|__|   |__|\\______) \\______/|__|   |_|   |_|\n\nJulia framework for Hierarchical Equations of Motion\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © NCKU-QFORT 2022 and later.\nLead  developer : Yi-Te Huang\nOther developers:\n    Neill Lambert, Po-Chen Kuo and Shen-Liang Yang\n\nPackage information:\n===================================\nHeom              Version: 0.1.0\nJLD2              Version: 0.4.25\nLinearSolve       Version: 1.26.1\nOrdinaryDiffEq    Version: 6.28.1\nProgressMeter     Version: 1.7.2\nSnoopPrecompile   Version: 1.0.1\n\nSystem information:\n===================================\nJulia Version: 1.8.0\nOS       : macOS (x86_64-apple-darwin21.4.0)\nCPU      : 12 × Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz\nMemory   : 16.0 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-13.0.1 (ORCJIT, skylake)\nBLAS     : libopenblas64_.0.3.20.dylib (ilp64)","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"Heom.print_logo(io::IO=stdout)","category":"page"},{"location":"lib/misc/#Heom.HeomBase.print_logo","page":"Misc.","title":"Heom.HeomBase.print_logo","text":"Heom.print_logo(io::IO=stdout)\n\nPrint the Logo of Heom package\n\n\n\n\n\n","category":"function"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"The output will be something like the following:","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"julia> Heom.versioninfo()\n                                   __\n                                  /  \\\n __     __                     __ \\__/ __\n|  |   |  |                   /  \\    /  \\\n|  |   |  | ______   ______   \\__/_  _\\__/\n|  |___|  |/  __  \\ /  __  \\ / '   \\/     \\\n|   ___   |  |__)  |  /  \\  |    _     _   |\n|  |   |  |   ____/| (    ) |   / \\   / \\  |\n|  |   |  |  |____ |  \\__/  |  |   | |   | |\n|__|   |__|\\______) \\______/|__|   |_|   |_|","category":"page"},{"location":"spectrum/#Spectrum","page":"Spectrum","title":"Spectrum","text":"","category":"section"},{"location":"spectrum/#Power-Spectral-Density","page":"Spectrum","title":"Power Spectral Density","text":"","category":"section"},{"location":"spectrum/#Density-of-States","page":"Spectrum","title":"Density of States","text":"","category":"section"},{"location":"bosonic_bath/#Bosonic-Bath","page":"Bosonic Bath","title":"Bosonic Bath","text":"","category":"section"},{"location":"bosonic_bath/#Drude-Lorentz-Spectral-Density","page":"Bosonic Bath","title":"Drude-Lorentz Spectral Density","text":"","category":"section"},{"location":"bosonic_bath/#Matsubara-Expansion","page":"Bosonic Bath","title":"Matsubara Expansion","text":"","category":"section"},{"location":"bosonic_bath/#Padé-Expansion","page":"Bosonic Bath","title":"Padé Expansion","text":"","category":"section"},{"location":"hierarchy_dictionary/#Hierarchy-Dictionary","page":"Hierarchy Dictionary","title":"Hierarchy Dictionary","text":"","category":"section"},{"location":"lib/phys_analysis/#Physical-Analysis-Functions","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"","category":"section"},{"location":"lib/phys_analysis/#Time-Evolution","page":"Physical Analysis Functions","title":"Time Evolution","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on generating Propagator","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"evolution(M::AbstractHEOMMatrix, ρ0, Δt::Real, steps::Int; threshold   = 1.0e-6, nonzero_tol = 1.0e-14, verbose::Bool = true, filename::String = \"\")\nevolution(M::AbstractHEOMMatrix, ados::ADOs, Δt::Real, steps::Int; threshold   = 1.0e-6, nonzero_tol = 1.0e-14, verbose::Bool = true, filename::String = \"\")","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, Any, Real, Int64}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ρ0, Δt, steps; threshold, nonzero_tol, verbose, filename)\n\nSolve the time evolution for auxiliary density operators based on propagator (generated by FastExpm.jl) with initial state is given in the type of density-matrix (ρ0).\n\nThis method will return the time evolution of ADOs corresponds to tlist = 0 : Δt : (Δt * steps)\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\nΔt::Real : A specific time step (time interval).\nsteps::Int : The number of time steps\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\nADOs_list : The auxiliary density operators of each time step.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, ADOs, Real, Int64}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ados, Δt, steps; threshold, nonzero_tol, verbose, filename)\n\nSolve the time evolution for auxiliary density operators based on propagator (generated by FastExpm.jl) with initial state is given in the type of ADOs.\n\nThis method will return the time evolution of ADOs corresponds to tlist = 0 : Δt : (Δt * steps)\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\nΔt::Real : A specific time step (time interval).\nsteps::Int : The number of time steps\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\nADOs_list : The auxiliary density operators of each time step.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on ODEs : OrdinaryDiffEq.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"evolution(M::AbstractHEOMMatrix, ρ0, tlist::AbstractVector; solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)\nevolution(M::AbstractHEOMMatrix, ados::ADOs, tlist::AbstractVector; solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, Any, AbstractVector}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ρ0, tlist; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators based on ordinary differential equations with initial state is given in the type of density-matrix (ρ0).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, ADOs, AbstractVector}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ados, tlist; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators based on ordinary differential equations with initial state is given in the type of ADOs.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Support for time-dependent system Hamiltonian using the method based on ODEs : OrdinaryDiffEq.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"evolution(M::AbstractHEOMMatrix, ρ0, tlist::AbstractVector, H::Function, param::Tuple = (); solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)\nevolution(M::AbstractHEOMMatrix, ados::ADOs, tlist::AbstractVector, H::Function, param::Tuple = (); solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ρ0, tlist, H, param; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators with time-dependent system Hamiltonian based on ordinary differential equations with initial state is given in the type of density-matrix (ρ0).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model (with time-independent system Hamiltonian)\nρ0 : system initial state (density matrix)\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nH::Function : a function for time-dependent part of system Hamiltonian. The function will be called by H(param, t) and should return the time-dependent part system Hamiltonian matrix at time t with AbstractMatrix type.\nparam::Tuple: the tuple of parameters which is used to call H(param, t) for the time-dependent system Hamiltonian. Default to empty tuple ().\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"function"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-2","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ados, tlist, H, param; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators with time-dependent system Hamiltonian based on ordinary differential equations with initial state is given in the type of ADOs.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model (with time-independent system Hamiltonian)\nados::ADOs : initial auxiliary density operators\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nH::Function : a function for time-dependent part of system Hamiltonian. The function will be called by H(param, t) and should return the time-dependent part system Hamiltonian matrix at time t with AbstractMatrix type.\nparam::Tuple: the tuple of parameters which is used to call H(param, t) for the time-dependent system Hamiltonian. Default to empty tuple ().\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"function"},{"location":"lib/phys_analysis/#Steady-State","page":"Physical Analysis Functions","title":"Steady State","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on LinearSolve.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"SteadyState(M::AbstractHEOMMatrix; solver=UMFPACKFactorization(), verbose::Bool=true, SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M; solver, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on LinearSolve.jl (i.e., solving x where A  x = b).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model, where the parity should be either :none (boson) or :even (fermion).\nsolver : solver in package LinearSolve.jl. Default to UMFPACKFactorization().\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver \n\nFor more details about solvers and extra options, please refer to LinearSolve.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on ODEs : OrdinaryDiffEq.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"SteadyState( M::AbstractHEOMMatrix, ρ0; solver = FBDF(autodiff=false), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, SOLVEROptions...)\nSteadyState( M::AbstractHEOMMatrix, ados::ADOs; solver = FBDF(autodiff=false), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix, Any}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M, ρ0; solver, reltol, abstol, maxiters, save_everystep, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on time evolution (ordinary differential equations) with initial state is given in the type of density-matrix (ρ0).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\nsolver : The ODE solvers in package DifferentialEquations.jl. Default to FBDF(autodiff=false).\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix, ADOs}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M, ados; solver, reltol, abstol, maxiters, save_everystep, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on time evolution (ordinary differential equations) with initial state is given in the type of ADOs.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\nsolver : The ODE solvers in package DifferentialEquations.jl. Default to FBDF(autodiff=false).\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Spectrum","page":"Physical Analysis Functions","title":"Spectrum","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"spectrum","category":"page"},{"location":"lib/phys_analysis/#Heom.Spectrum.spectrum","page":"Physical Analysis Functions","title":"Heom.Spectrum.spectrum","text":"spectrum(M, ρ, op, ω_list; solver, verbose, filename, SOLVEROptions...)\n\nCalculate spectrum for the system.\n\nTo calculate spectrum for bosonic systems (usually known as power spectrum):\n\npi S(omega)=textrmReleftint_0^infty dt langle a^dagger(t) a(0)rangle e^-iomega tright\n\nremember to set the parameters: \n\nM::AbstractHEOMMatrix: should be :even parity\nop: the (annihilation) operator a for bosonic system as shown above \n\nTo calculate spectrum for fermionic systems (usually known as density of states):\n\n    pi A(omega)=textrmReleftint_0^infty dt leftlangle d(t) d^dagger(0)rangle^* + langle d^dagger(t) d(0)rangle right e^-iomega tright\n\nremember to set the parameters: \n\nM::AbstractHEOMMatrix: should be :odd parity\nop: the (annihilation) operator d for fermionic system as shown above \n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model.\nρ :  the system density matrix or the auxiliary density operators.\nop : The annihilation operator acting on the system.\nω_list::AbstractVector : the specific frequency points to solve.\nsolver : solver in package LinearSolve.jl. Default to UMFPACKFactorization().\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the value of spectrum for each ω will be saved into the file during the solving process.\nSOLVEROptions : extra options for solver \n\nFor more details about solvers and extra options, please refer to LinearSolve.jl\n\nReturns\n\nspec::AbstractVector : the spectrum list corresponds to the specified ω_list\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Correlation-Functions","page":"Bath Correlation Functions","title":"Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/#Bosonic-Bath-Correlation-Functions","page":"Bath Correlation Functions","title":"Bosonic Bath Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/","page":"Bath Correlation Functions","title":"Bath Correlation Functions","text":"Boson_DrudeLorentz_Matsubara\nBoson_DrudeLorentz_Pade","category":"page"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Boson_DrudeLorentz_Matsubara","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Boson_DrudeLorentz_Matsubara","text":"Boson_DrudeLorentz_Matsubara(op, λ, W, T, N)\n\nConstructing Drude-Lorentz bosonic bath with Matsubara expansion\n\nParameters\n\nop : The system operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::BosonBath : a bosonic bath object with describes the interaction between system and bosonic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Boson_DrudeLorentz_Pade","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Boson_DrudeLorentz_Pade","text":"Boson_DrudeLorentz_Pade(op, λ, W, T, N)\n\nConstructing Drude-Lorentz bosonic bath with Padé expansion\n\nA Padé approximant is a sum-over-poles expansion (see here for more details).\n\nThe application of the Padé method to spectrum decompoisitions is described in Ref. [1].\n\n[1] J. Chem. Phys. 134, 244106 (2011)\n\nParameters\n\nop : The system operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::BosonBath : a bosonic bath object with describes the interaction between system and bosonic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Fermionic-Bath-Correlation-Functions","page":"Bath Correlation Functions","title":"Fermionic Bath Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/","page":"Bath Correlation Functions","title":"Bath Correlation Functions","text":"Fermion_Lorentz_Matsubara\nFermion_Lorentz_Pade","category":"page"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Fermion_Lorentz_Matsubara","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Fermion_Lorentz_Matsubara","text":"Fermion_Lorentz_Matsubara(op, λ, μ, W, T, N)\n\nConstructing Lorentzian fermionic bath with Matsubara expansion\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nμ::Real: The chemical potential of the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::FermionBath : a fermionic bath object with describes the interaction between system and fermionic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Fermion_Lorentz_Pade","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Fermion_Lorentz_Pade","text":"Fermion_Lorentz_Pade(op, λ, μ, W, T, N)\n\nConstructing Lorentzian fermionic bath with Padé expansion\n\nA Padé approximant is a sum-over-poles expansion (see here for more details).\n\nThe application of the Padé method to spectrum decompoisitions is described in Ref. [1].\n\n[1] J. Chem. Phys. 134, 244106 (2011)\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nμ::Real: The chemical potential of the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::FermionBath : a fermionic bath object with describes the interaction between system and fermionic bath\n\n\n\n\n\n","category":"function"},{"location":"cite/#Cite-Heom.jl","page":"Cite Heom","title":"Cite Heom.jl","text":"","category":"section"},{"location":"cite/","page":"Cite Heom","title":"Cite Heom","text":"@article{Heom2023\n  title={},\n  author={},\n  journal={},\n  year={}\n}","category":"page"},{"location":"ADOs/#Auxiliary-Density-Operators","page":"Auxiliary Density Operators","title":"Auxiliary Density Operators","text":"","category":"section"},{"location":"ADOs/#Solve-Time-Evolution","page":"Auxiliary Density Operators","title":"Solve Time Evolution","text":"","category":"section"},{"location":"ADOs/#Solve-Steady-State","page":"Auxiliary Density Operators","title":"Solve Steady State","text":"","category":"section"},{"location":"examples/quick_start/#Quick-Start","page":"QuickStart","title":"Quick Start","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"(This notebook can be found on github)","category":"page"},{"location":"examples/quick_start/#Content","page":"QuickStart","title":"Content","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Import Heom.jl\nSystem and Bath\nHEOM liouvillian superoperator\nTime Evolution\nStationary State\nMultiple Baths","category":"page"},{"location":"examples/quick_start/#Import-Heom.jl","page":"QuickStart","title":"Import Heom.jl","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Here are the functions in Heom.jl that we will use in this tutorial (Quick Start):","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"import Heom: Boson_DrudeLorentz_Pade, M_Boson, evolution, SteadyState, getRho, BosonBath","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Note that you can also type using Heom to import everything you need in Heom.jl.","category":"page"},{"location":"examples/quick_start/#System-and-Bath","page":"QuickStart","title":"System and Bath","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Let us consider a simple two-level system coupled to a Drude-Lorentz bosonic bath. The system Hamiltonian, H_sys, and the bath spectral density, J_D, are","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":" H_sys=fracepsilon sigma_z2 + fracDelta sigma_x2 textand","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"J_D(omega)=frac2lambda WomegaW^2+omega^2","category":"page"},{"location":"examples/quick_start/#System-Hamiltonian-and-initial-state","page":"QuickStart","title":"System Hamiltonian and initial state","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"You can construct system hamiltonian, initial state, and coupling operators by standard julia bulit-in types: Vector, SparseVector, Matrix, SparseMatrix.","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Moreover, it is also convenient to use QuantumOptics framework. It provides many useful functions to create arbitrary quantum states and operators which can be combined in all the expected ways.","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Note that Heom.jl only accept standard julia bulit-in types. If you use QuantumOptics to construct the operators, remember that the matrix (or vector) in standard type are stored in .data field of the objects, i.e., op.data where op is a QuantumOptics-type object.   Thus, you should take it as the inputs of Heom.jl for objects in QuantumOptics package.","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"We demonstrate this tutorial by QuantumOptics:","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"import QuantumOptics: SpinBasis, sigmaz, sigmax, ⊗, Ket, Bra","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"basis = SpinBasis(1//2)\n\n# The system Hamiltonian\nϵ = 0.5 # energy of 2-level system\nΔ = 1.0 # tunneling term\n\nHsys = 0.5 * ϵ * sigmaz(basis) + 0.5 * Δ * sigmax(basis)\n\n# System initial state\nρ0 = Ket(basis, [1, 0]) ⊗ Bra(basis, [1, 0])","category":"page"},{"location":"examples/quick_start/#Bath-Properties","page":"QuickStart","title":"Bath Properties","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Now, we demonstrate how to describe the bath using the built-in implementation of J_D(omega) under Pade expansion by calling Boson_DrudeLorentz_Pade","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"λ = 0.1  # coupling strength\nW = 0.5  # cut-off frequency\nT = 0.5  # temperature\n\n# system-bath coupling operator\nQ = sigmaz(basis);\n\n# Number of expansion terms to retain:\nN = 2\n\n# Padé expansion:\n## Remember to give the operator in Standard matrix (AbstractMatrix) type\n## That is, if using QuantumOptics package, give system coupling operator as Q.data\nbath = Boson_DrudeLorentz_Pade(Q.data, λ, W, T, N)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"For other different expansions of the different spectral density correlation functions, please refer to Bosonic Bath and Fermionic Bath.","category":"page"},{"location":"examples/quick_start/#HEOM-liouvillian-superoperator","page":"QuickStart","title":"HEOM liouvillian superoperator","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"For bosonic bath, we can construct the Heom liouvillian superoperator matrix by calling M_Boson","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"# maximum tier of hierarchy\ntier = 5\n\n# Remember to give the operator in Standard matrix (AbstractMatrix) type\n# That is, if using QuantumOptics package, give system hamiltonian as Hsys.data\nL = M_Boson(Hsys.data, tier, bath; verbose=false)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"To learn more about the Heom liouvillian superoperator matrix (including other types: M_Fermion, M_Boson_Fermion), please refer to HEOM Matrix.","category":"page"},{"location":"examples/quick_start/#Time-Evolution","page":"QuickStart","title":"Time Evolution","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Next, we can calculate the time evolution for the entire auxiliary density operators (ADOs) by calling evolution","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"tlist = 0:0.2:50\nados_list = evolution(L, ρ0.data, tlist; verbose=false)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"To learn more about evolution, please refer to Auxiliary Density Operators.","category":"page"},{"location":"examples/quick_start/#Stationary-State","page":"QuickStart","title":"Stationary State","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"We can also solve the stationary state of the auxiliary density operators (ADOs) by calling SteadyState.","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"ados_steady = SteadyState(L; verbose=false)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"To learn more about SteadyState, please refer to Auxiliary Density Operators.","category":"page"},{"location":"examples/quick_start/#Calculate-population-and-coherence","page":"QuickStart","title":"Calculate population and coherence","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"We can now compare the results obtained from evolution and SteadyState:","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"import LinearAlgebra: tr  # import trace function","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"# Define the operators that measure the populations of the two\n# system states:\nP00 = Ket(basis, [1, 0]) ⊗ Bra(basis, [1, 0])\nP11 = Ket(basis, [0, 1]) ⊗ Bra(basis, [0, 1])\n\n# Define the operator that measures the 0, 1 element of density matrix\n# (corresponding to coherence):\nP01 = Ket(basis, [1, 0]) ⊗ Bra(basis, [0, 1])","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"To obtain the reduced density operator, one can either access the first element of auxiliary density operator (ADOs) or call getRho:","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"# for steady state\nρs = ados_steady[1]  # 1 represents the 1st auxiliary density operator (reduce state)\np00_s = real(tr(P00.data * ρs))\np01_s = real(tr(P01.data * ρs))\n\n# for time evolution\np00_e = []\np01_e = []\nfor i in 1:length(tlist)\n    ρe = ados_list[i][1]\n    push!(p00_e, real(tr(P00.data * ρe)))\n    push!(p01_e, real(tr(P01.data * ρe)))\nend","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"One of the great features of Heom.jl is that we allow users to not only considering the density operator of the reduced state but also easily take high-order terms into account without struggling in finding the indices (see Hierarchy Dictionary for more details).","category":"page"},{"location":"examples/quick_start/#Plot-the-results","page":"QuickStart","title":"Plot the results","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"using Plots\nPlots.scalefontsizes(1.5)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"p = plot(\n    tlist, \n    [\n        p00_e,\n        p01_e,\n        ones(length(tlist)) .* p00_s, \n        ones(length(tlist)) .* p01_s,\n    ],\n    label=[\"P00\" \"P01\" \"P00 (Steady State)\" \"P01 (Steady State)\"],\n    linecolor=[ :blue   :red :blue  :red],\n    linestyle=[:solid :solid :dash :dash],\n    xlabel=\"time\",\n    ylabel=\"Population\",\n    fontfamily=\"Computer Modern\",\n    linewidth=3, \n    grid=false,\n    dpi=300 \n)\n\np","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"(Image: svg)","category":"page"},{"location":"examples/quick_start/#Multiple-Baths","page":"QuickStart","title":"Multiple Baths","text":"","category":"section"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Heom.jl also supports for system to interact with multiple baths.   All you need to do is to provide a list of baths instead of a single bath","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"# The system Hamiltonian\nHsys = [\n    0.25 1.50 2.50;\n    1.50 0.75 3.50;\n    2.50 3.50 1.25\n]\n\n# System initial state\nρ0 = [\n    1 0 0;\n    0 0 0;\n    0 0 0\n];\n\n# Construct one bath for each system state:\n## note that `BosonBath[]` make the list created in type: Vector{BosonBath}\nbaths = BosonBath[]\nfor i in 1:3\n    # system-bath coupling operator: |i><i|\n    Q = zeros(3, 3)\n    Q[i, i] = 1\n    \n    push!(baths, Boson_DrudeLorentz_Pade(Q, λ, W, T, N))\nend","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"L = M_Boson(Hsys, tier, baths; verbose=false)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"tlist = 0:0.025:5\nados_list = evolution(L, ρ0, tlist; verbose=false)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"# Projector for each system state:\nP00 = [1 0 0; 0 0 0; 0 0 0]\nP11 = [0 0 0; 0 1 0; 0 0 0]\nP22 = [0 0 0; 0 0 0; 0 0 1]\n\n# calculate population for each system state:\np0 = []\np1 = []\np2 = []\nfor ados in ados_list\n    ρ = getRho(ados)  # same as ados[1]\n    push!(p0, real(tr(P00 * ρ)))\n    push!(p1, real(tr(P11 * ρ)))\n    push!(p2, real(tr(P22 * ρ)))\nend","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"p = plot(\n    tlist, \n    [p0, p1, p2],\n    label=[\"P0\" \"P1\" \"P2\"],\n    linecolor=[ :blue :red :green],\n    linestyle=[:solid :dot  :dash],\n    xlabel=\"time\",\n    ylabel=\"Population\",\n    fontfamily=\"Computer Modern\",\n    linewidth=2, \n    grid=false,\n    dpi=300 \n)\n\np","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"(Image: svg)","category":"page"},{"location":"examples/quick_start/","page":"QuickStart","title":"QuickStart","text":"Note that this example can also be found in qutip documentation.","category":"page"},{"location":"lib/bath/#lib-Bath","page":"Bath","title":"Bath Module","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"C(bath::BosonBath, tlist::AbstractVector)","category":"page"},{"location":"lib/bath/#Heom.Bath.C-Tuple{BosonBath, AbstractVector}","page":"Bath","title":"Heom.Bath.C","text":"C(bath, tlist)\n\nCalculate the correlation function C(t) for a given bosonic bath and time list.\n\nParameters\n\nbath::BosonBath : The bath object which describes a certain bosonic bath.\ntlist::AbstractVector: The specific time.\n\nReturns\n\nclist::Vector{ComplexF64} : a list of the value of correlation function according to the given time list.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"C(bath::FermionBath, tlist::AbstractVector)","category":"page"},{"location":"lib/bath/#Heom.Bath.C-Tuple{FermionBath, AbstractVector}","page":"Bath","title":"Heom.Bath.C","text":"C(bath, tlist)\n\nCalculate the correlation function C^+(t) and C^-(t) for a given fermionic bath and time list. Here, \"+\" represents the absorption and \"-\" represents the emmision process.\n\nParameters\n\nbath::FermionBath : The bath object which describes a certain fermionic bath.\ntlist::AbstractVector: The specific time.\n\nReturns\n\ncplist::Vector{ComplexF64} : a list of the value of the absorption (sigma=+) correlation function according to the given time list.\ncmlist::Vector{ComplexF64} : a list of the value of the emission (sigma=-) correlation function according to the given time list.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#lib-Bosonic-Bath","page":"Bath","title":"Bosonic Bath","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"BosonBath","category":"page"},{"location":"lib/bath/#Heom.Bath.BosonBath","page":"Bath","title":"Heom.Bath.BosonBath","text":"struct BosonBath <: AbstractBath\n\nAn object which describes the interaction between system and bosonic bath\n\nFields\n\nbath : the different boson-bath-type objects which describes the interaction between system and bosonic bath\nop : The system operator according to the system-bosonic-bath interaction.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nNterm : the number of exponential-expansion term of correlation functions\nδ : The approximation discrepancy which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\nMethods\n\nOne can obtain the k-th exponent (exponential-expansion term) from bath::BosonBath by calling : bath[k]. Heom.jl also supports the following calls (methods) :\n\nbath[1:k];   # returns a vector which contains the exponents from the `1`-st to the `k`-th term.\nbath[1:end]; # returns a vector which contains all the exponential-expansion terms\nbath[:];     # returns a vector which contains all the exponential-expansion terms\nfrom b in bath\n    # do something\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"BosonBath(op::AbstractMatrix, η::Vector{Ti}, γ::Vector{Tj}, δ::Number=0.0; combine::Bool=true) where {Ti, Tj <: Number}\nBosonBath(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}, η_imag::Vector{Tk}, γ_imag::Vector{Tl}, δ::Tm=0.0; combine::Bool=true) where {Ti, Tj, Tk, Tl, Tm <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.BosonBath-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Number}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.BosonBath","text":"BosonBath(op, η, γ, δ=0.0; combine=true)\n\nGenerate BosonBath object for the case where real part and imaginary part of the correlation function are combined.\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη::Vector{Ti<:Number} : the coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ::Vector{Tj<:Number} : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Default to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\ncombine::Bool : Whether to combine the exponential-expansion terms with the same frequency. Defaults to true.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#Heom.Bath.BosonBath-Union{Tuple{Tm}, Tuple{Tl}, Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}, Tm}} where {Ti, Tj, Tk, Tl, Tm<:Number}","page":"Bath","title":"Heom.Bath.BosonBath","text":"BosonBath(op, η_real, γ_real, η_imag, γ_imag, δ=0.0; combine=true)\n\nGenerate BosonBath object for the case where the correlation function splits into real part and imaginary part.\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_real::Vector{Tj<:Number} : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag::Vector{Tk<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_imag::Vector{Tl<:Number} : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Default to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\ncombine::Bool : Whether to combine the exponential-expansion terms with the same frequency. Defaults to true.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonReal","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonReal","page":"Bath","title":"Heom.Bath.bosonReal","text":"struct bosonReal <: AbstractBosonBath\n\nA bosonic bath for the real part of bath correlation function\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonReal(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}) where {Ti, Tj <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonReal-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.bosonReal","text":"bosonReal(op, η_real, γ_real)\n\nGenerate bosonic bath for the real part of bath correlation function\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_real::Vector{Tj<:Number} : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonImag","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonImag","page":"Bath","title":"Heom.Bath.bosonImag","text":"struct bosonImag <: AbstractBosonBath\n\nA bosonic bath for the imaginary part of bath correlation function\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\nanComm  : the super-operator (anti-commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonImag(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}) where {Ti, Tj <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonImag-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.bosonImag","text":"bosonImag(op, η_imag, γ_imag)\n\nGenerate bosonic bath for the imaginary part of correlation function\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_imag::Vector{Ti<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_imag::Vector{Tj<:Number} : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonRealImag","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonRealImag","page":"Bath","title":"Heom.Bath.bosonRealImag","text":"sturct bosonRealImag <: AbstractBosonBath\n\nA bosonic bath which the real part and imaginary part of the bath correlation function are combined\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\nanComm  : the super-operator (anti-commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη_real : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonRealImag(op::AbstractMatrix, η_real::Vector{Ti}, η_imag::Vector{Tj}, γ::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonRealImag-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.bosonRealImag","text":"bosonRealImag(op, η_real, η_imag, γ)\n\nGenerate bosonic bath which the real part and imaginary part of the bath correlation function are combined\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag::Vector{Tj<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ::Vector{Tk<:Number} : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#lib-Fermionic-Bath","page":"Bath","title":"Fermionic Bath","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"FermionBath","category":"page"},{"location":"lib/bath/#Heom.Bath.FermionBath","page":"Bath","title":"Heom.Bath.FermionBath","text":"struct FermionBath <: AbstractBath\n\nAn object which describes the interaction between system and fermionic bath\n\nFields\n\nbath : the different fermion-bath-type objects which describes the interaction\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nNterm : the number of exponential-expansion term of correlation functions\nδ : The approximation discrepancy which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\nMethods\n\nOne can obtain the k-th exponent (exponential-expansion term) from bath::FermionBath by calling : bath[k]. Heom.jl also supports the following calls (methods) :\n\nbath[1:k];   # returns a vector which contains the exponents from the `1`-st to the `k`-th term.\nbath[1:end]; # returns a vector which contains all the exponential-expansion terms\nbath[:];     # returns a vector which contains all the exponential-expansion terms\nfrom b in bath\n    # do something\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"FermionBath(op::AbstractMatrix, η_absorb::Vector{Ti}, γ_absorb::Vector{Tj}, η_emit::Vector{Tk}, γ_emit::Vector{Tl}, δ::Tm=0.0) where {Ti, Tj, Tk, Tl, Tm <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.FermionBath-Union{Tuple{Tm}, Tuple{Tl}, Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}, Tm}} where {Ti, Tj, Tk, Tl, Tm<:Number}","page":"Bath","title":"Heom.Bath.FermionBath","text":"FermionBath(op, η_absorb, γ_absorb, η_emit, γ_emit, δ=0.0)\n\nGenerate FermionBath object\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_absorb::Vector{Tj<:Number} : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit::Vector{Tk<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_emit::Vector{Tl<:Number} : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Defaults to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionAbsorb","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionAbsorb","page":"Bath","title":"Heom.Bath.fermionAbsorb","text":"struct fermionAbsorb <: AbstractFermionBath\n\nAn object which describes the absorption of the system in the interaction\n\nFields\n\nspre   : the super-operator (right side operator multiplication) for the coupling operator.\nspost  : the super-operator (left side operator multiplication) for the coupling operator.\nspreD  : the super-operator (right side operator multiplication) for the adjoint of the coupling operator.\nspostD : the super-operator (left side operator multiplication) for the adjoint of the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionAbsorb(op::AbstractMatrix, η_absorb::Vector{Ti}, γ_absorb::Vector{Tj}, η_emit::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionAbsorb-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.fermionAbsorb","text":"fermionAbsorb(op, η_absorb, γ_absorb, η_emit)\n\nGenerate fermionic bath which describes the absorption of the system in the interaction\n\nParameters\n\nop : The system absorption operator according to the system-fermionic-bath interaction.\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_absorb::Vector{Tj<:Number} : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit::Vector{Tk<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionEmit","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionEmit","page":"Bath","title":"Heom.Bath.fermionEmit","text":"struct fermionEmit <: AbstractFermionBath\n\nAn object which describes the emission of the system in the interaction\n\nFields\n\nspre   : the super-operator (right side operator multiplication) for the coupling operator.\nspost  : the super-operator (left side operator multiplication) for the coupling operator.\nspreD  : the super-operator (right side operator multiplication) for the adjoint of the coupling operator.\nspostD : the super-operator (left side operator multiplication) for the adjoint of the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_absorb : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionEmit(op::AbstractMatrix, η_emit::Vector{Ti}, γ_emit::Vector{Tj}, η_absorb::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionEmit-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.fermionEmit","text":"fermionEmit(op, η_emit, γ_emit, η_absorb)\n\nGenerate fermionic bath which describes the absorption of the system in the interaction\n\nParameters\n\nop : The system emission operator according to the system-fermionic-bath interaction.\nη_emit::Vector{Ti<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_emit::Vector{Ti<:Number} : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#lib-Exponent","page":"Bath","title":"Exponent","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"Exponent","category":"page"},{"location":"lib/bath/#Heom.Bath.Exponent","page":"Bath","title":"Heom.Bath.Exponent","text":"struct Exponent\n\nAn object which describes a single exponential-expansion term (naively, an excitation mode)  within the decomposition of the bath correlation functions.\n\nThe expansion of a bath correlation function can be expressed as : sum_i eta_i e^-gamma_i t.\n\nFields\n\nop : The coupling operator according to system-bath interaction.\nη::Number : the coefficient eta_i in bath correlation functions.\nγ::Number : the coefficient gamma_i in bath correlation functions.\ntypes::String : The type-tag of the exponent.\n\nThe types different types of the Exponent:\n\n\"bR\" : from real part of bosonic correlation function\n\"bI\" : from imaginary part of bosonic correlation function\n\"bRI\" : from combined (real and imaginary part) bosonic bath correlation function\n\"fA\" : from the fermionic bath which describes the absorption\n\"fE\" : from the fermionic bath which describes the emission\n\n\n\n\n\n","category":"type"},{"location":"#Heom.jl:-An-efficient-julia-framework-for-Hierarchical-Equations-of-Motion-(HEOM)-in-open-quantum-systems","page":"Introduction","title":"Heom.jl: An efficient julia framework for Hierarchical Equations of Motion (HEOM) in open quantum systems","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Heom Ecosystem)","category":"page"}]
}
