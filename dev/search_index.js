var documenterSearchIndex = {"docs":
[{"location":"heom_matrix/#Hierarchical-Equations-of-Motion-(Heom)-Liouvillian-Superoperator-Matrix","page":"HEOM Matrix","title":"Hierarchical Equations of Motion (Heom) Liouvillian Superoperator Matrix","text":"","category":"section"},{"location":"fermionic_bath/#Fermionic-Bath","page":"Fermionic Bath","title":"Fermionic Bath","text":"","category":"section"},{"location":"fermionic_bath/#Lorentz-Spectral-Density","page":"Fermionic Bath","title":"Lorentz Spectral Density","text":"","category":"section"},{"location":"fermionic_bath/#Matsubara-Expansion","page":"Fermionic Bath","title":"Matsubara Expansion","text":"","category":"section"},{"location":"fermionic_bath/#Padé-Expansion","page":"Fermionic Bath","title":"Padé Expansion","text":"","category":"section"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#Heom.jl","page":"Installation","title":"Heom.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"To install Heom.jl, run the following commands inside Julia's interactive session (also known as REPL):","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"Heom\")","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Alternatively, this can also be done in Julia's Pkg REPL by pressing the key ] in the REPL to use the package mode, and then type the following command:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(1.8) pkg> add Heom","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"More information about Julia's package manager can be found at Pkg.jl.   Heom requires Julia 1.8 or higher. Installing it on an older version of Julia will result in many errors.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"To load the package and check the version information, use the command:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"julia> using Heom\njulia> Heom.versioninfo()","category":"page"},{"location":"install/#Other-Useful-Packages","page":"Installation","title":"Other Useful Packages","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In order to get a better experience and take full advantage of Heom, we recommend to install the following external packages:","category":"page"},{"location":"install/#[QuantumOptics.jl](https://qojulia.org/)","page":"Installation","title":"QuantumOptics.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"QuantumOptics framework provides many useful functions to create arbitrary quantum states and operators which can be combined in all the expected ways. Constructing arbitrary Hamiltonians and specifying initial states is also straightforward.  ","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThe inputs in Heom should be child-type of the standard Base.AbstractVector (for vector-type quantum states) and Base.AbstractMatrix (for matrix-type quantum operators). Users can still construct the vectors or matrices by standard method and take it as the input of Heom.   For the users who constructs the quantum objects by QuantumOptics package, the standard type of vectors or matrices are stored in the .data field of the objects, i.e., op.data (where op is a QuantumOptics-type object). Thus, users should take it as the inputs of Heom for objects in QuantumOptics package.","category":"page"},{"location":"install/#[DifferentialEquations.jl](https://diffeq.sciml.ai/stable/)","page":"Installation","title":"DifferentialEquations.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"DifferentialEquations is needed to provide the low-level ODE solvers especially for solving time evolution. For low dependency usage, users can use OrdinaryDiffEq.jl instead.","category":"page"},{"location":"install/#[LinearSolve.jl](http://linearsolve.sciml.ai/stable/)","page":"Installation","title":"LinearSolve.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"LinearSolve is a unified interface for the linear solving packages of Julia. It interfaces with other packages of the Julia ecosystem to make it easier to test alternative solver packages and pass small types to control algorithm swapping. It is needed to provide the solvers especially for solving SteadyState, PSD (power spectral density), and DOS (density of states).","category":"page"},{"location":"install/#[JLD2.jl](https://juliaio.github.io/JLD2.jl/stable/)","page":"Installation","title":"JLD2.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"JLD2 saves and loads Julia data structures in a format comprising a subset of HDF5. Because the size of matrix in Heom is usually super large and leads to long time calculation, we support the functionality for saving and loading the Heom-type objects into files by JLD2 >= 0.4.23.","category":"page"},{"location":"install/#[Plots.jl](https://docs.juliaplots.org/stable/)","page":"Installation","title":"Plots.jl","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Plots is a visualization interface and toolset for Julia.","category":"page"},{"location":"lib/heom_api/#Heom-API-Module","page":"Heom API","title":"Heom API Module","text":"","category":"section"},{"location":"lib/heom_api/#Heom-liouvillian-superoperator-matrices","page":"Heom API","title":"Heom liouvillian superoperator matrices","text":"","category":"section"},{"location":"lib/heom_api/#Boson-Heom-matrix","page":"Heom API","title":"Boson Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson","page":"Heom API","title":"Heom.HeomAPI.M_Boson","text":"mutable struct M_Boson <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for bosonic bath\n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier : the tier (cutoff) for the bath\ndim : the dimension of system\nN : the number of total ADOs\nNb : the number of bosonic ADOs\nNf : the number of fermionic ADOs (should be zero)\nsup_dim : the dimension of system superoperator\nparity : the parity of the density matrix (restrict to :none for boson)\nbath::Vector{BosonBath} : the vector which stores all BosonBath objects\nhierarchy::HierarchyDict: the object which contains all dictionaries for boson-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson(Hsys::AbstractMatrix, tier::Int, Bath::Vector{BosonBath}; progressBar::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson-Tuple{AbstractMatrix, Int64, Vector{BosonBath}}","page":"Heom API","title":"Heom.HeomAPI.M_Boson","text":"M_Boson(Hsys, tier, Bath; verbose=true)\n\nGenerate the boson-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The system Hamiltonian\ntier::Int : the tier (cutoff) for the bath\nBath::Vector{BosonBath} : objects for different bosonic baths\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Fermion-Heom-matrix","page":"Heom API","title":"Fermion Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Fermion","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Fermion","page":"Heom API","title":"Heom.HeomAPI.M_Fermion","text":"mutable struct M_Fermion <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for fermionic bath\n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier : the tier (cutoff) for the bath\ndim : the dimension of system\nN : the number of total ADOs\nNb : the number of bosonic ADOs (should be zero)\nNf : the number of fermionic ADOs\nsup_dim : the dimension of system superoperator\nparity : the parity of the density matrix\nbath::Vector{FermionBath} : the vector which stores all FermionBath objects\nhierarchy::HierarchyDict: the object which contains all dictionaries for fermion-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Fermion(Hsys::AbstractMatrix, tier::Int, Bath::Vector{FermionBath}, parity::Symbol=:even; progressBar::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Fermion-2","page":"Heom API","title":"Heom.HeomAPI.M_Fermion","text":"M_Fermion(Hsys, tier, Bath, parity=:even; verbose=true)\n\nGenerate the fermion-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The system Hamiltonian\ntier::Int : the tier (cutoff) for the bath\nBath::Vector{FermionBath} : objects for different fermionic baths\nparity::Symbol : The parity symbol of the density matrix (either :odd or :even). Defaults to :even.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Boson-Fermion-Heom-matrix","page":"Heom API","title":"Boson-Fermion Heom matrix","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson_Fermion","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson_Fermion","page":"Heom API","title":"Heom.HeomAPI.M_Boson_Fermion","text":"mutable struct M_Boson_Fermion <: AbstractHEOMMatrix\n\nHeom liouvillian superoperator matrix for mixtured (bosonic and fermionic) bath \n\nFields\n\ndata : the sparse matrix of HEOM liouvillian superoperator\ntier_b : the tier (cutoff) for bosonic bath\ntier_f : the tier (cutoff) for fermionic bath\ndim : the dimension of system\nN : the number of total ADOs\nNb : the number of bosonic ADOs\nNf : the number of fermionic ADOs\nsup_dim : the dimension of system superoperator\nparity : the parity of the density matrix\nado2idx_b : the bosonic ADO-to-index dictionary\nado2idx_f : the fermionic ADO-to-index dictionary\nbath_b::Vector{BosonBath} : the vector which stores all BosonBath objects\nbath_f::Vector{FermionBath} : the vector which stores all FermionBath objects\nhierarchy_b::HierarchyDict: the object which contains all dictionaries for boson-bath-ADOs hierarchy.\nhierarchy_f::HierarchyDict: the object which contains all dictionaries for fermion-bath-ADOs hierarchy.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"M_Boson_Fermion(Hsys::AbstractMatrix, tier_b::Int, tier_f::Int, Bath_b::Vector{BosonBath}, Bath_f::Vector{FermionBath}, parity::Symbol=:even; progressBar::Bool=true)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.M_Boson_Fermion-2","page":"Heom API","title":"Heom.HeomAPI.M_Boson_Fermion","text":"M_Boson_Fermion(Hsys, tier_b, tier_f, Bath_b, Bath_f, parity=:even; verbose=true)\n\nGenerate the boson-fermion-type Heom liouvillian superoperator matrix\n\nParameters\n\nHsys : The system Hamiltonian\ntier_b::Int : the tier (cutoff) for the bosonic bath\ntier_f::Int : the tier (cutoff) for the fermionic bath\nBath_b::Vector{BosonBath} : objects for different bosonic baths\nBath_f::Vector{FermionBath} : objects for different fermionic baths\nparity::Symbol : The parity symbol of the density matrix (either :odd or :even). Defaults to :even.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/#Functions-for-Heom-Matrices","page":"Heom API","title":"Functions for Heom Matrices","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"size(M::AbstractHEOMMatrix)\nPropagator\naddDissipator!\naddTerminator!","category":"page"},{"location":"lib/heom_api/#Base.size-Tuple{AbstractHEOMMatrix}","page":"Heom API","title":"Base.size","text":"size(M::AbstractHEOMMatrix)\n\nReturns the size of the Heom liouvillian superoperator matrix\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Heom.HeomAPI.Propagator","page":"Heom API","title":"Heom.HeomAPI.Propagator","text":"Propagator(M, Δt; threshold, nonzero_tol)\n\nUse FastExpm.jl to calculate the propagator matrix from a given Heom liouvillian superoperator matrix M with a specific time step Δt. That is, exp(M * Delta t).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nΔt::Real : A specific time step (time interval).\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\n::SparseMatrixCSC{ComplexF64, Int64} : the propagator matrix\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.addDissipator!","page":"Heom API","title":"Heom.HeomAPI.addDissipator!","text":"addDissipator!(M, jumpOP)\n\nAdding dissipator to a given HEOM matrix.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\njumpOP::AbstractVector : The collapse (jump) operators to add. Defaults to empty vector [].\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.addTerminator!","page":"Heom API","title":"Heom.HeomAPI.addTerminator!","text":"addTerminator!(M, Bath)\n\nAdding terminator to a given HEOM matrix.\n\nThe terminator is a liouvillian term representing the contribution to  the system-bath dynamics of all exponential-expansion terms beyond Bath.Nterm\n\nThe difference between the true correlation function and the sum of the  Bath.Nterm-exponential terms is approximately 2 * δ * dirac(t). Here, δ is the approximation discrepancy and dirac(t) denotes the Dirac-delta function.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nBath::Union{BosonBath, FermionBath} : The bath object which contains the approximation discrepancy δ\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Auxiliary-Density-Operators-(ADOs)","page":"Heom API","title":"Auxiliary Density Operators (ADOs)","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"ADOs","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.ADOs","page":"Heom API","title":"Heom.HeomAPI.ADOs","text":"mutable struct ADOs\n\nThe Auxiliary Density Operators for Heom model.\n\nFields\n\ndata : the vectorized auxiliary density operators\ndim : the dimension of the system\nNb : the number of bosonic states\nNf : the number of fermionic states\n\nMethods\n\nFor pure bosonic (or fermionic) type bath ADOs,  one can obtain the density matrix for specific index (idx) by calling : ados[idx]. Heom.jl also supports the following calls (methods) :\n\nlength(ados);  # returns the total number of `ADOs`\nados[1:idx];   # returns a vector which contains the `ADO` (in matrix form) from index `1` to `idx`\nados[1:end];   # returns a vector which contains all the `ADO` (in matrix form)\nados[:];       # returns a vector which contains all the `ADO` (in matrix form)\nfrom rho in ados  # iteration\n    # do something\nend\n\nFor mixed (bosonic and fermionic) type bath ADOs,  one needs two indices (idx_b and idx_f), and thus, ados[idx_b, idx_f]. Note that the first index specifies the bosonic bath index while the other one specifies the fermionic bath. Heom.jl also supports the following calls (methods) :\n\nlength(ados);       # returns the total number of `ADOs`\nados[idx_b, 1:end]; # returns a vector which contains all the fermionic `ADO` (in matrix form) where bosonic index is `idx_b`\nados[idx_b, :];     # returns a vector which contains all the fermionic `ADO` (in matrix form) where bosonic index is `idx_b`\nados[1:end, idx_f]; # returns a vector which contains all the bosonic `ADO` (in matrix form) where fermionic index is `idx_f`\nados[:, idx_f];     # returns a vector which contains all the bosonic `ADO` (in matrix form) where fermionic index is `idx_f`\n\nBut, currently, we don't support iterate() for mixed bath ADOs.\n\n\n\n\n\n","category":"type"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"ADOs(V::AbstractVector; Nb::Int=0, Nf::Int=0)","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.ADOs-Tuple{AbstractVector}","page":"Heom API","title":"Heom.HeomAPI.ADOs","text":"ADOs(V; Nb=0, Nf=0)\n\nGernerate the object of auxiliary density operators for Heom model.\n\nParameters\n\nV::AbstractVector : the vectorized auxiliary density operators\nNb::Int : the number of bosonic states. Defaults to 0.\nNf::Int : the number of fermionic states Defaults to 0.\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Functions-for-Auxiliary-Density-Operators","page":"Heom API","title":"Functions for Auxiliary Density Operators","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"length(A::ADOs)\ngetRho\ngetADO(ados::ADOs, idx::Int)\ngetADO(ados::ADOs, idx_b::Int, idx_f::Int)","category":"page"},{"location":"lib/heom_api/#Base.length-Tuple{ADOs}","page":"Heom API","title":"Base.length","text":"length(A::ADOs)\n\nReturns the total number of the Auxiliary Density Operators (ADOs)\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Heom.HeomAPI.getRho","page":"Heom API","title":"Heom.HeomAPI.getRho","text":"getRho(ados)\n\nReturn the density matrix of the reduced state (system) from a given auxiliary density operators\n\nParameters\n\nados::ADOs : the auxiliary density operators for Heom model\n\nReturns\n\nρ : The density matrix of the reduced state\n\n\n\n\n\n","category":"function"},{"location":"lib/heom_api/#Heom.HeomAPI.getADO-Tuple{ADOs, Int64}","page":"Heom API","title":"Heom.HeomAPI.getADO","text":"getADO(ados, idx)\n\nReturn the auxiliary density operator with a specific index from auxiliary density operators\n\nThis function equals to calling : ados[idx].\n\nParameters\n\nados::ADOs : the auxiliary density operators for Heom model\nidx::Int : the index of the auxiliary density operator\n\nReturns\n\nρ_idx : The auxiliary density operator\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Heom.HeomAPI.getADO-Tuple{ADOs, Int64, Int64}","page":"Heom API","title":"Heom.HeomAPI.getADO","text":"getADO(ados, idx_b, idx_f)\n\nReturn the auxiliary density operator with specific indices [only for mixtured (bosonic and fermionic) bath]\n\nThis function equals to calling : ados[idx_b, idx_f].\n\nParameters\n\nados::ADOs : the auxiliary density operators for Heom model\nidx_b::Int : the bosonic-state index of the auxiliary density operator.\nidx_f::Int : the fermionic-state index of the auxiliary density operator.\n\nReturns\n\nρ_idx : The auxiliary density operator\n\n\n\n\n\n","category":"method"},{"location":"lib/heom_api/#Hierarchy-Dictionary","page":"Heom API","title":"Hierarchy Dictionary","text":"","category":"section"},{"location":"lib/heom_api/","page":"Heom API","title":"Heom API","text":"HierarchyDict","category":"page"},{"location":"lib/heom_api/#Heom.HeomAPI.HierarchyDict","page":"Heom API","title":"Heom.HeomAPI.HierarchyDict","text":"struct HierarchyDict\n\nAn object which contains all dictionaries for bath-ADOs hierarchy.\n\nThe ado (or n_vector) denotes a set of integers:\n\n n_11  n_nu k  \n\nwhere n_nu k geq 0 associated with the k-th exponential-expansion term in the nu-th bath.\n\nThe hierarchy level (L) for an ado is given by L=sum_nu k n_nu k\n\nFields\n\nidx2ado : Return the ado (n_vector) from a given index\nado2idx : Return the index from a given ado (n_vector)\nlvl2idx : Return the list of indices from a given level\nbathPtr : The indices for the exponential-expansion terms of the N-th bath in ado (n_vector) can be obtained by bathPtr[N]:(bathPtr[N+1] - 1)\n\n\n\n\n\n","category":"type"},{"location":"lib/misc/#Misc.","page":"Misc.","title":"Misc.","text":"","category":"section"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"Heom.versioninfo()","category":"page"},{"location":"lib/misc/#Heom.HeomBase.versioninfo-Tuple{}","page":"Misc.","title":"Heom.HeomBase.versioninfo","text":"Heom.versioninfo(io::IO=stdout)\n\nCommand line output of information on Heom, dependencies, and system informations.\n\n\n\n\n\n","category":"method"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"The outputs will be something like the following:","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"julia> Heom.versioninfo()\n\n                                   __\n                                  /  \\\n __     __                     __ \\__/ __\n|  |   |  |                   /  \\    /  \\\n|  |   |  | ______   ______   \\__/_  _\\__/\n|  |___|  |/  __  \\ /  __  \\ / '   \\/     \\\n|   ___   |  |__)  |  /  \\  |    _     _   |\n|  |   |  |   ____/| (    ) |   / \\   / \\  |\n|  |   |  |  |____ |  \\__/  |  |   | |   | |\n|__|   |__|\\______) \\______/|__|   |_|   |_|\n\nJulia framework for Hierarchical Equations of Motion\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © NCKU-QFORT 2022 and later.\nLead  developer : Yi-Te Huang\nOther developers:\n    Neill Lambert, Po-Chen Kuo and Shen-Liang Yang\n\nPackage information:\n===================================\nHeom              Version: 0.1.0\nDistributedArrays Version: 0.6.6\nJLD2              Version: 0.4.25\nLinearSolve       Version: 1.26.1\nOrdinaryDiffEq    Version: 6.28.1\nProgressMeter     Version: 1.7.2\nSnoopPrecompile   Version: 1.0.1\n\nSystem information:\n===================================\nJulia Version: 1.8.0\nOS       : macOS (x86_64-apple-darwin21.4.0)\nCPU      : 12 × Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz\nMemory   : 16.0 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-13.0.1 (ORCJIT, skylake)\nBLAS     : libopenblas64_.0.3.20.dylib (ilp64)","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"Heom.print_logo(io::IO=stdout)","category":"page"},{"location":"lib/misc/#Heom.HeomBase.print_logo","page":"Misc.","title":"Heom.HeomBase.print_logo","text":"Heom.print_logo(io::IO=stdout)\n\nPrint the Logo of Heom package\n\n\n\n\n\n","category":"function"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"The output will be something like the following:","category":"page"},{"location":"lib/misc/","page":"Misc.","title":"Misc.","text":"julia> Heom.versioninfo()\n                                   __\n                                  /  \\\n __     __                     __ \\__/ __\n|  |   |  |                   /  \\    /  \\\n|  |   |  | ______   ______   \\__/_  _\\__/\n|  |___|  |/  __  \\ /  __  \\ / '   \\/     \\\n|   ___   |  |__)  |  /  \\  |    _     _   |\n|  |   |  |   ____/| (    ) |   / \\   / \\  |\n|  |   |  |  |____ |  \\__/  |  |   | |   | |\n|__|   |__|\\______) \\______/|__|   |_|   |_|","category":"page"},{"location":"quick_start/#Quick-Start","page":"QuickStart","title":"Quick Start","text":"","category":"section"},{"location":"spectrum/#Spectrum","page":"Spectrum","title":"Spectrum","text":"","category":"section"},{"location":"spectrum/#Power-Spectral-Density","page":"Spectrum","title":"Power Spectral Density","text":"","category":"section"},{"location":"spectrum/#Density-of-States","page":"Spectrum","title":"Density of States","text":"","category":"section"},{"location":"bosonic_bath/#Bosonic-Bath","page":"Bosonic Bath","title":"Bosonic Bath","text":"","category":"section"},{"location":"bosonic_bath/#Drude-Lorentz-Spectral-Density","page":"Bosonic Bath","title":"Drude-Lorentz Spectral Density","text":"","category":"section"},{"location":"bosonic_bath/#Matsubara-Expansion","page":"Bosonic Bath","title":"Matsubara Expansion","text":"","category":"section"},{"location":"bosonic_bath/#Padé-Expansion","page":"Bosonic Bath","title":"Padé Expansion","text":"","category":"section"},{"location":"hierarchy_dictionary/#Hierarchy-Dictionary","page":"Hierarchy Dictionary","title":"Hierarchy Dictionary","text":"","category":"section"},{"location":"lib/phys_analysis/#Physical-Analysis-Functions","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"","category":"section"},{"location":"lib/phys_analysis/#Time-Evolution","page":"Physical Analysis Functions","title":"Time Evolution","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on generating Propagator","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"evolution(M::AbstractHEOMMatrix, ρ0, Δt::Real, steps::Int; threshold   = 1.0e-6, nonzero_tol = 1.0e-14, verbose::Bool = true, filename::String = \"\")\nevolution(M::AbstractHEOMMatrix, ados::ADOs, Δt::Real, steps::Int; threshold   = 1.0e-6, nonzero_tol = 1.0e-14, verbose::Bool = true, filename::String = \"\")","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, Any, Real, Int64}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ρ0, Δt, steps; threshold, nonzero_tol, verbose, filename)\n\nSolve the time evolution for auxiliary density operators based on propagator (generated by FastExpm.jl) with initial state is given in the type of density-matrix (ρ0).\n\nThis method will return the time evolution of ADOs corresponds to tlist = 0 : Δt : (Δt * steps)\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\nΔt::Real : A specific time step (time interval).\nsteps::Int : The number of time steps\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\nADOs_list : The auxiliary density operators of each time step.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, ADOs, Real, Int64}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ados, Δt, steps; threshold, nonzero_tol, verbose, filename)\n\nSolve the time evolution for auxiliary density operators based on propagator (generated by FastExpm.jl) with initial state is given in the type of ADOs.\n\nThis method will return the time evolution of ADOs corresponds to tlist = 0 : Δt : (Δt * steps)\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\nΔt::Real : A specific time step (time interval).\nsteps::Int : The number of time steps\nthreshold::Real : Determines the threshold for the Taylor series. Defaults to 1.0e-6.\nnonzero_tol::Real : Strips elements smaller than nonzero_tol at each computation step to preserve sparsity. Defaults to 1.0e-14.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\n\nFor more details, please refer to FastExpm.jl\n\nReturns\n\nADOs_list : The auxiliary density operators of each time step.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on ODEs : OrdinaryDiffEq.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"evolution(M::AbstractHEOMMatrix, ρ0, tlist::AbstractVector; solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)\nevolution(M::AbstractHEOMMatrix, ados::ADOs, tlist::AbstractVector; solver = DP5(), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, filename::String = \"\", SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, Any, AbstractVector}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ρ0, tlist; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators based on ordinary differential equations with initial state is given in the type of density-matrix (ρ0).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.evolution-Tuple{AbstractHEOMMatrix, ADOs, AbstractVector}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.evolution","text":"evolution(M, ados, tlist; solver, reltol, abstol, maxiters, save_everystep, verbose, filename, SOLVEROptions...)\n\nSolve the time evolution for auxiliary density operators based on ordinary differential equations with initial state is given in the type of ADOs.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\ntlist::AbstractVector : Denote the specific time points to save the solution at, during the solving process.\nsolver : solver in package DifferentialEquations.jl. Default to DP5().\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the ADOs at each time point will be saved into the JLD2 file during the solving process.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\nADOs_list : The auxiliary density operators in each time point.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Steady-State","page":"Physical Analysis Functions","title":"Steady State","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on LinearSolve.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"SteadyState(M::AbstractHEOMMatrix; solver=UMFPACKFactorization(), verbose::Bool=true, SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M; solver, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on LinearSolve.jl (i.e., solving x where A  x = b).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model, where the parity should be either :none (boson) or :even (fermion).\nsolver : solver in package LinearSolve.jl. Default to UMFPACKFactorization().\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver \n\nFor more details about solvers and extra options, please refer to LinearSolve.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Using the method based on ODEs : OrdinaryDiffEq.jl","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"SteadyState( M::AbstractHEOMMatrix, ρ0; solver = FBDF(autodiff=false), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, SOLVEROptions...)\nSteadyState( M::AbstractHEOMMatrix, ados::ADOs; solver = FBDF(autodiff=false), reltol::Real = 1.0e-6, abstol::Real = 1.0e-8, maxiters::Real = 1e5, save_everystep::Bool=false, verbose::Bool = true, SOLVEROptions...)","category":"page"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix, Any}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M, ρ0; solver, reltol, abstol, maxiters, save_everystep, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on time evolution (ordinary differential equations) with initial state is given in the type of density-matrix (ρ0).\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nρ0 : system initial state (density matrix)\nsolver : The ODE solvers in package DifferentialEquations.jl. Default to FBDF(autodiff=false).\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Heom.HeomAPI.SteadyState-Tuple{AbstractHEOMMatrix, ADOs}","page":"Physical Analysis Functions","title":"Heom.HeomAPI.SteadyState","text":"SteadyState(M, ados; solver, reltol, abstol, maxiters, save_everystep, verbose, SOLVEROptions...)\n\nSolve the steady state of the auxiliary density operators based on time evolution (ordinary differential equations) with initial state is given in the type of ADOs.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model\nados::ADOs : initial auxiliary density operators\nsolver : The ODE solvers in package DifferentialEquations.jl. Default to FBDF(autodiff=false).\nreltol::Real : Relative tolerance in adaptive timestepping. Default to 1.0e-6.\nabstol::Real : Absolute tolerance in adaptive timestepping. Default to 1.0e-8.\nmaxiters::Real : Maximum number of iterations before stopping. Default to 1e5.\nsave_everystep::Bool : Saves the result at every step. Defaults to false.\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nSOLVEROptions : extra options for solver\n\nFor more details about solvers and extra options, please refer to DifferentialEquations.jl\n\nReturns\n\n::ADOs : The steady state of auxiliary density operators.\n\n\n\n\n\n","category":"method"},{"location":"lib/phys_analysis/#Spectrum","page":"Physical Analysis Functions","title":"Spectrum","text":"","category":"section"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Power Spectral Density (for bosonic type Bath)","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"PSD","category":"page"},{"location":"lib/phys_analysis/#Heom.Spectrum.PSD","page":"Physical Analysis Functions","title":"Heom.Spectrum.PSD","text":"PSD(M, ρ, op, ω_list; solver, verbose, filename, SOLVEROptions...)\n\nCalculate power spectral density.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model (the parity must be :none or :even.)\nρ :  the system density matrix or the auxiliary density operators.\nop : The system operator for the two-time correlation function in frequency domain.\nω_list::AbstractVector : the specific frequency points to solve.\nsolver : solver in package LinearSolve.jl. Default to UMFPACKFactorization().\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the value of psd for each ω will be saved into the file during the solving process.\nSOLVEROptions : extra options for solver \n\nFor more details about solvers and extra options, please refer to LinearSolve.jl\n\nReturns\n\npsd::AbstractVector : power spectral density\n\n\n\n\n\n","category":"function"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"Density of States (for fermionic type Bath)","category":"page"},{"location":"lib/phys_analysis/","page":"Physical Analysis Functions","title":"Physical Analysis Functions","text":"DOS","category":"page"},{"location":"lib/phys_analysis/#Heom.Spectrum.DOS","page":"Physical Analysis Functions","title":"Heom.Spectrum.DOS","text":"DOS(M, ρ, op, ω_list; solver, verbose, filename, SOLVEROptions...)\n\nCalculate density of states.\n\nParameters\n\nM::AbstractHEOMMatrix : the matrix given from HEOM model (the parity must be :odd.)\nρ :  the system density matrix or the auxiliary density operators.\nop : The system operator for the two-time correlation function in frequency domain.\nω_list::AbstractVector : the specific frequency points to solve.\nsolver : solver in package LinearSolve.jl. Default to UMFPACKFactorization().\nverbose::Bool : To display verbose output and progress bar during the process or not. Defaults to true.\nfilename::String : If filename was specified, the value of dos for each ω will be saved into the file during the solving process.\nSOLVEROptions : extra options for solver \n\nFor more details about solvers and extra options, please refer to LinearSolve.jl\n\nReturns\n\ndos::AbstractVector : density of state\n\n\n\n\n\n","category":"function"},{"location":"examples/JC_model/#JC","page":"JC","title":"JC","text":"","category":"section"},{"location":"lib/corr_func/#Correlation-Functions","page":"Bath Correlation Functions","title":"Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/#Bosonic-Bath-Correlation-Functions","page":"Bath Correlation Functions","title":"Bosonic Bath Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/","page":"Bath Correlation Functions","title":"Bath Correlation Functions","text":"Boson_DrudeLorentz_Matsubara\nBoson_DrudeLorentz_Pade","category":"page"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Boson_DrudeLorentz_Matsubara","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Boson_DrudeLorentz_Matsubara","text":"Boson_DrudeLorentz_Matsubara(op, λ, W, T, N)\n\nConstructing Drude-Lorentz bosonic bath with Matsubara expansion\n\nParameters\n\nop : The system operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::BosonBath : a bosonic bath object with describes the interaction between system and bosonic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Boson_DrudeLorentz_Pade","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Boson_DrudeLorentz_Pade","text":"Boson_DrudeLorentz_Pade(op, λ, W, T, N)\n\nConstructing Drude-Lorentz bosonic bath with Padé expansion\n\nA Padé approximant is a sum-over-poles expansion (see here for more details).\n\nThe application of the Padé method to spectrum decompoisitions is described in Ref. [1].\n\n[1] J. Chem. Phys. 134, 244106 (2011)\n\nParameters\n\nop : The system operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::BosonBath : a bosonic bath object with describes the interaction between system and bosonic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Fermionic-Bath-Correlation-Functions","page":"Bath Correlation Functions","title":"Fermionic Bath Correlation Functions","text":"","category":"section"},{"location":"lib/corr_func/","page":"Bath Correlation Functions","title":"Bath Correlation Functions","text":"Fermion_Lorentz_Matsubara\nFermion_Lorentz_Pade","category":"page"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Fermion_Lorentz_Matsubara","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Fermion_Lorentz_Matsubara","text":"Fermion_Lorentz_Matsubara(op, λ, μ, W, T, N)\n\nConstructing Lorentzian fermionic bath with Matsubara expansion\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nμ::Real: The chemical potential of the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::FermionBath : a fermionic bath object with describes the interaction between system and fermionic bath\n\n\n\n\n\n","category":"function"},{"location":"lib/corr_func/#Heom.CorrelationFunc.Fermion_Lorentz_Pade","page":"Bath Correlation Functions","title":"Heom.CorrelationFunc.Fermion_Lorentz_Pade","text":"Fermion_Lorentz_Pade(op, λ, μ, W, T, N)\n\nConstructing Lorentzian fermionic bath with Padé expansion\n\nA Padé approximant is a sum-over-poles expansion (see here for more details).\n\nThe application of the Padé method to spectrum decompoisitions is described in Ref. [1].\n\n[1] J. Chem. Phys. 134, 244106 (2011)\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nλ::Real: The coupling strength between the system and the bath.\nμ::Real: The chemical potential of the bath.\nW::Real: The reorganization energy (band-width) of the bath.\nT::Real: The temperature of the bath.\nN::Int: Number of exponential terms used to approximate the bath correlation functions.\n\nReturns\n\nbath::FermionBath : a fermionic bath object with describes the interaction between system and fermionic bath\n\n\n\n\n\n","category":"function"},{"location":"cite/#Cite-Heom.jl","page":"Cite Heom","title":"Cite Heom.jl","text":"","category":"section"},{"location":"cite/","page":"Cite Heom","title":"Cite Heom","text":"@article{Heom2023\n  title={},\n  author={},\n  journal={},\n  year={}\n}","category":"page"},{"location":"ADOs/#Auxiliary-Density-Operators","page":"Auxiliary Density Operators","title":"Auxiliary Density Operators","text":"","category":"section"},{"location":"ADOs/#Solve-Time-Evolution","page":"Auxiliary Density Operators","title":"Solve Time Evolution","text":"","category":"section"},{"location":"ADOs/#Solve-Steady-State","page":"Auxiliary Density Operators","title":"Solve Steady State","text":"","category":"section"},{"location":"#Heom.jl:-An-efficient-julia-framework-for-Hierarchical-Equations-of-Motion-(HEOM)-in-open-quantum-systems","page":"Introduction","title":"Heom.jl: An efficient julia framework for Hierarchical Equations of Motion (HEOM) in open quantum systems","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Heom Ecosystem)","category":"page"},{"location":"lib/bath/#Bath-Module","page":"Bath","title":"Bath Module","text":"","category":"section"},{"location":"lib/bath/#Bosonic-Bath","page":"Bath","title":"Bosonic Bath","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"BosonBath","category":"page"},{"location":"lib/bath/#Heom.Bath.BosonBath","page":"Bath","title":"Heom.Bath.BosonBath","text":"struct BosonBath <: AbstractBath\n\nAn object which describes the interaction between system and bosonic bath\n\nFields\n\nbath : the different boson-bath-type objects which describes the interaction between system and bosonic bath\nop : The system operator according to the system-bosonic-bath interaction.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nNterm : the number of exponential-expansion term of correlation functions\nδ : The approximation discrepancy which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\nMethods\n\nOne can obtain the k-th exponent (exponential-expansion term) from bath::BosonBath by calling : bath[k]. Heom.jl also supports the following calls (methods) :\n\nbath[1:k];   # returns a vector which contains the exponents from the `1`-st to the `k`-th term.\nbath[1:end]; # returns a vector which contains all the exponential-expansion terms\nbath[:];     # returns a vector which contains all the exponential-expansion terms\nfrom b in bath\n    # do something\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"BosonBath(op::AbstractMatrix, η::Vector{Ti}, γ::Vector{Tj}, δ::Number=0.0; combine::Bool=true) where {Ti, Tj <: Number}\nBosonBath(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}, η_imag::Vector{Tk}, γ_imag::Vector{Tl}, δ::Tm=0.0; combine::Bool=true) where {Ti, Tj, Tk, Tl, Tm <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.BosonBath-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Number}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.BosonBath","text":"BosonBath(op, η, γ, δ=0.0; combine=true)\n\nGenerate BosonBath object for the case where real part and imaginary part of the correlation function are combined.\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη::Vector{Ti<:Number} : the coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ::Vector{Tj<:Number} : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Default to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\ncombine::Bool : Whether to combine the exponential-expansion terms with the same frequency. Defaults to true.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#Heom.Bath.BosonBath-Union{Tuple{Tm}, Tuple{Tl}, Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}, Tm}} where {Ti, Tj, Tk, Tl, Tm<:Number}","page":"Bath","title":"Heom.Bath.BosonBath","text":"BosonBath(op, η_real, γ_real, η_imag, γ_imag, δ=0.0; combine=true)\n\nGenerate BosonBath object for the case where the correlation function splits into real part and imaginary part.\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_real::Vector{Tj<:Number} : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag::Vector{Tk<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_imag::Vector{Tl<:Number} : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Default to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\ncombine::Bool : Whether to combine the exponential-expansion terms with the same frequency. Defaults to true.\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonReal","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonReal","page":"Bath","title":"Heom.Bath.bosonReal","text":"struct bosonReal <: AbstractBosonBath\n\nA bosonic bath for the real part of bath correlation function\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonReal(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}) where {Ti, Tj <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonReal-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.bosonReal","text":"bosonReal(op, η_real, γ_real)\n\nGenerate bosonic bath for the real part of bath correlation function\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_real::Vector{Tj<:Number} : the real part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonImag","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonImag","page":"Bath","title":"Heom.Bath.bosonImag","text":"struct bosonImag <: AbstractBosonBath\n\nA bosonic bath for the imaginary part of bath correlation function\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\nanComm  : the super-operator (anti-commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonImag(op::AbstractMatrix, η_real::Vector{Ti}, γ_real::Vector{Tj}) where {Ti, Tj <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonImag-Union{Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}}} where {Ti, Tj<:Number}","page":"Bath","title":"Heom.Bath.bosonImag","text":"bosonImag(op, η_imag, γ_imag)\n\nGenerate bosonic bath for the imaginary part of correlation function\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_imag::Vector{Ti<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_imag::Vector{Tj<:Number} : the imaginary part of coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonRealImag","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonRealImag","page":"Bath","title":"Heom.Bath.bosonRealImag","text":"sturct bosonRealImag <: AbstractBosonBath\n\nA bosonic bath which the real part and imaginary part of the bath correlation function are combined\n\nFields\n\nComm  : the super-operator (commutator) for the coupling operator.\nanComm  : the super-operator (anti-commutator) for the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη_real : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"bosonRealImag(op::AbstractMatrix, η_real::Vector{Ti}, η_imag::Vector{Tj}, γ::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.bosonRealImag-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.bosonRealImag","text":"bosonRealImag(op, η_real, η_imag, γ)\n\nGenerate bosonic bath which the real part and imaginary part of the bath correlation function are combined\n\nParameters\n\nop : The system operator according to the system-bosonic-bath interaction.\nη_real::Vector{Ti<:Number} : the real part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_imag::Vector{Tj<:Number} : the imaginary part of coefficients eta_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ::Vector{Tk<:Number} : the coefficients gamma_i in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#Fermionic-Bath","page":"Bath","title":"Fermionic Bath","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"FermionBath","category":"page"},{"location":"lib/bath/#Heom.Bath.FermionBath","page":"Bath","title":"Heom.Bath.FermionBath","text":"struct FermionBath <: AbstractBath\n\nAn object which describes the interaction between system and fermionic bath\n\nFields\n\nbath : the different fermion-bath-type objects which describes the interaction\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nNterm : the number of exponential-expansion term of correlation functions\nδ : The approximation discrepancy which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\nMethods\n\nOne can obtain the k-th exponent (exponential-expansion term) from bath::FermionBath by calling : bath[k]. Heom.jl also supports the following calls (methods) :\n\nbath[1:k];   # returns a vector which contains the exponents from the `1`-st to the `k`-th term.\nbath[1:end]; # returns a vector which contains all the exponential-expansion terms\nbath[:];     # returns a vector which contains all the exponential-expansion terms\nfrom b in bath\n    # do something\nend\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"FermionBath(op::AbstractMatrix, η_absorb::Vector{Ti}, γ_absorb::Vector{Tj}, η_emit::Vector{Tk}, γ_emit::Vector{Tl}, δ::Tm=0.0) where {Ti, Tj, Tk, Tl, Tm <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.FermionBath-Union{Tuple{Tm}, Tuple{Tl}, Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}, Vector{Tl}, Tm}} where {Ti, Tj, Tk, Tl, Tm<:Number}","page":"Bath","title":"Heom.Bath.FermionBath","text":"FermionBath(op, η_absorb, γ_absorb, η_emit, γ_emit, δ=0.0)\n\nGenerate FermionBath object\n\nParameters\n\nop : The system \"emission\" operator according to the system-fermionic-bath interaction.\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_absorb::Vector{Tj<:Number} : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit::Vector{Tk<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_emit::Vector{Tl<:Number} : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nδ::Number : The approximation discrepancy (Defaults to 0.0) which is used for adding the terminator to HEOM matrix (see function: addTerminator!)\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionAbsorb","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionAbsorb","page":"Bath","title":"Heom.Bath.fermionAbsorb","text":"struct fermionAbsorb <: AbstractFermionBath\n\nAn object which describes the absorption of the system in the interaction\n\nFields\n\nspre   : the super-operator (right side operator multiplication) for the coupling operator.\nspost  : the super-operator (left side operator multiplication) for the coupling operator.\nspreD  : the super-operator (right side operator multiplication) for the adjoint of the coupling operator.\nspostD : the super-operator (left side operator multiplication) for the adjoint of the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionAbsorb(op::AbstractMatrix, η_absorb::Vector{Ti}, γ_absorb::Vector{Tj}, η_emit::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionAbsorb-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.fermionAbsorb","text":"fermionAbsorb(op, η_absorb, γ_absorb, η_emit)\n\nGenerate fermionic bath which describes the absorption of the system in the interaction\n\nParameters\n\nop : The system absorption operator according to the system-fermionic-bath interaction.\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_absorb::Vector{Tj<:Number} : the coefficients gamma_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_emit::Vector{Tk<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionEmit","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionEmit","page":"Bath","title":"Heom.Bath.fermionEmit","text":"struct fermionEmit <: AbstractFermionBath\n\nAn object which describes the emission of the system in the interaction\n\nFields\n\nspre   : the super-operator (right side operator multiplication) for the coupling operator.\nspost  : the super-operator (left side operator multiplication) for the coupling operator.\nspreD  : the super-operator (right side operator multiplication) for the adjoint of the coupling operator.\nspostD : the super-operator (left side operator multiplication) for the adjoint of the coupling operator.\ndim : the dimension of the coupling operator (should be equal to the system dimension).\nη : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_absorb : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\nNterm : the number of exponential-expansion term of correlation function\n\n\n\n\n\n","category":"type"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"fermionEmit(op::AbstractMatrix, η_emit::Vector{Ti}, γ_emit::Vector{Tj}, η_absorb::Vector{Tk}) where {Ti, Tj, Tk <: Number}","category":"page"},{"location":"lib/bath/#Heom.Bath.fermionEmit-Union{Tuple{Tk}, Tuple{Tj}, Tuple{Ti}, Tuple{AbstractMatrix, Vector{Ti}, Vector{Tj}, Vector{Tk}}} where {Ti, Tj, Tk<:Number}","page":"Bath","title":"Heom.Bath.fermionEmit","text":"fermionEmit(op, η_emit, γ_emit, η_absorb)\n\nGenerate fermionic bath which describes the absorption of the system in the interaction\n\nParameters\n\nop : The system emission operator according to the system-fermionic-bath interaction.\nη_emit::Vector{Ti<:Number} : the coefficients eta_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nγ_emit::Vector{Ti<:Number} : the coefficients gamma_i for emission in bath correlation functions (sum_i eta_i e^-gamma_i t).\nη_absorb::Vector{Ti<:Number} : the coefficients eta_i for absorption in bath correlation functions (sum_i eta_i e^-gamma_i t).\n\n\n\n\n\n","category":"method"},{"location":"lib/bath/#Exponent","page":"Bath","title":"Exponent","text":"","category":"section"},{"location":"lib/bath/","page":"Bath","title":"Bath","text":"Exponent","category":"page"},{"location":"lib/bath/#Heom.Bath.Exponent","page":"Bath","title":"Heom.Bath.Exponent","text":"struct Exponent\n\nAn object which describes a single exponential-expansion term (naively, an excitation mode)  within the decomposition of the bath correlation functions.\n\nThe expansion of a bath correlation function can be expressed as : sum_i eta_i e^-gamma_i t.\n\nFields\n\nop : The coupling operator according to system-bath interaction.\nη::Number : the coefficient eta_i in bath correlation functions.\nγ::Number : the coefficient gamma_i in bath correlation functions.\ntag : The type-tag of the exponent.\n\n\n\n\n\n","category":"type"}]
}
